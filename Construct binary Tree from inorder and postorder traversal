Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   
Code in C++:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(vector<int>& inorder,int in1,int in2,vector<int>& postorder,int p1,int p2){
        if(in1>in2 or p1>p2){
            return NULL;
        }
        TreeNode* root = new TreeNode(postorder[p2]); // the root of the binary tree is the last element of postorder
        int rootInd = in1;
        for(;rootInd<=in2;rootInd++){
            if(inorder[rootInd]==postorder[p2]){   // check the index of root value in inorder
                break;
            }
        }
        root->left= helper(inorder,in1,rootInd-1,postorder,p1,p1+rootInd-in1-1);   // left subtree for binary tree
        root->right = helper(inorder,rootInd+1,in2,postorder,p1+rootInd-in1,p2-1); // right subtree for binary tree
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return helper(inorder,0,inorder.size()-1,postorder,0,inorder.size()-1);
    }
};
