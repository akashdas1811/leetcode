Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.

Example:

Input: 38
Output: 2 
Explanation: The process is like: 3 + 8 = 11, 1 + 1 = 2. 
             Since 2 has only one digit, return it.
             

Code in C++:

Time Complixity: O(n)
Space Complixity: O(n)

class Solution {
public:
    int addDigits(int num) {
        if(num==0){
            return 0;
        }
        int digit =0;
        while(num>0){
            digit+=num%10;
            num=num/10;
        }
        int f=0,temp;
        for(int i=1;i<=9;i++){
            if(digit==i){
                temp=i;
                f=1;
                break;
            }
        }
        if(f==1){
            return temp;
        }
        else{
            return addDigits(digit);
        }
    }
};

Efficient Approach:
Time Complixity: O(1)
Space Complixity: O(1)

class Solution {
public:
    int addDigits(int num) {
        if(num==0){
            return 0;
        }
        if(num%9==0){
            return 9;
        }
        return (num%9);
    }
};
