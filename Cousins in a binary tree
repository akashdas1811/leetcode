/*
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

INPUT:  root =  [1, 2, 3, 4],  x = 4,   y = 3
OUTPUT: false

INPUT:  root =  [1, 2, 3, null, 4, null, 5],  x = 5,  y = 4
OUTPUT: true

recursive solution in c++:
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int level(TreeNode* root,int x,int lev){
    if(root==NULL){
        return 0;
    }
     if(root->val==x)
     {
         return lev;
     }
    return max(level(root->left,x,lev+1),level(root->right,x,lev+1));
}
int issiblings(TreeNode* root,int x)
{
    if(root==NULL)
    {
        return 0;
    }
    if((root->left && root->left->val==x) || (root->right && root->right->val==x))
    {
        return root->val;
    }
    return max(issiblings(root->left,x),issiblings(root->right,x));  
} 
    bool isCousins(TreeNode* root, int x, int y) {
        if(level(root,x,0)==level(root,y,0) and issiblings(root,x)!=issiblings(root,y))
       {
           return true;
       }
      return false;
    }
};
