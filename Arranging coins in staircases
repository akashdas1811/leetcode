You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.

Given n, find the total number of full staircase rows that can be formed.

n is a non-negative integer and fits within the range of a 32-bit signed integer.

Example 1:

n = 5

The coins can form the following rows:
¤
¤ ¤
¤ ¤

Because the 3rd row is incomplete, we return 2.

Example 2:

n = 8

The coins can form the following rows:
¤
¤ ¤
¤ ¤ ¤
¤ ¤

Because the 4th row is incomplete, we return 3.


first soloution in itterative method in c++:

Time Complexity: O(n)
space complexity: O(1)

int aarangeCoins(int n)
{
   if(n<=1){ return n;}
   int i=1;count=0;
   while(n>0){
       n=n-i;
       if(n<0){         // while decrementing the value of n if n becomes less than n then we break the loop,,operation. e.g.: 5=>(5-1=4,count=1,i++=2)=>(4-2=2,count=2,i++=3)=>(2-3<0,break,return count=2)
         break;
      }
      count++;
      i++;
   }
   return count;
}

2nd solution binary search in c++:

Time Complexity: O(logn)
space :          O(1)

class Solution {
  public int arrangeCoins(int n) {
    long left = 0, right = n;
    long k, curr;
    while (left <= right) {
      k = left + (right - left) / 2;
      curr = k * (k + 1) / 2;

      if (curr == n) return (int)k;

      if (n < curr) {
        right = k - 1;
      } else {
        left = k + 1;
      }
    }
    return (int)right;
  }
}

3rd solution in math in c++:

Time Complexity: O(1)
space complexity: O(1)

If we look deeper into the formula of the problem, we could actually solve it with the help of mathematics, without using any iteration.

As a reminder, the constraint of the problem can be expressed as follows:

k(k + 1) \le 2N
k(k+1)≤2N

class Solution {
  public int arrangeCoins(int n) {
    return (int)(Math.sqrt(2 * (long)n + 0.25) - 0.5);
  }
}
