Given a number N. The task is to generate and print all binary numbers with decimal values from 1 to N.

Input:
The first line of input contains an integer T denoting the number of test cases. There will be a single line for each testcase which contains N.

Output:
Print all binary numbers with decimal values from 1 to N in a single line.

Constraints:
1 ≤ T ≤ 106
1 ≤ N ≤ 106

Example:
Input:
2
2
5

Output:
1 10
1 10 11 100 101

Explanation:
Testcase 1: Binary numbers from 1 to 2 are 1 and 10.

Code in c++:

#include<bits/stdc++.h>
using namespace std;
int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        queue<string>q;
        q.push("1");  // Enqueue the first binary number
        
        // This loops is like BFS of a tree with 1 as root 
        // 0 as left child and 1 as right child and so on
        
        for(int i=1;i<=n;i++){
        
            // print the front of queue
            
            string s= q.front();
            cout<<s<<" ";
            q.pop();
            q.push(s+'0'); // Append "0" to s and enqueue it 
            q.push(s+'1');  // Append "1" to s and enqueue it. Note that s contains the previous front 
        }
        cout<<endl;
    }
    return 0;
}

Using stack:

void binary(int num)
{
  int r;
  stack<int>st;
  while(num)
  {
     r=num%2;
     st.push(r);
     num=num/2;
  }

  while(!st.empty())
  {
     cout<<st.top();
     st.pop();
  }
}
