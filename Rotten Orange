class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        int fresh=0;
        int time=0;
        queue<pair<int,int>>q;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }
                if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        while(q.size()){
            int size=q.size();
            for(int i=0;i<size;i++){
                pair loc=q.front();
                q.pop();
                int x=loc.first;
                int y=loc.second;
                if(x>=1 && grid[x-1][y]==1){
                    fresh--;
                    grid[x-1][y]=2;
                    q.push({x-1,y});
                }
                 if(x<rows-1 && grid[x+1][y]==1){
                    fresh--;
                    grid[x+1][y]=2;
                    q.push({x+1,y});
                }
                 if(y>=1 && grid[x][y-1]==1){
                    fresh--;
                    grid[x][y-1]=2;
                    q.push({x,y-1});
                }
                 if(y<cols-1 && grid[x][y+1]==1){
                    fresh--;
                    grid[x][y+1]=2;
                    q.push({x,y+1});
                }
                
            }
            time++;
        }
        if(fresh!=0){
            return -1;
        }
        //if there is no rotten orange return 0 time
        if(time==0){
            return 0;
        }
        //decrementing last erroneous time++
        time--;
        return time;
    }
};
