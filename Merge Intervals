Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

 

Constraints:

intervals[i][0] <= intervals[i][1]

Code in c++:

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        stack<pair<int,int>>st;
        vector<vector<int>>res;
        if(intervals.size()==0){
            return res;
        }
        sort(intervals.begin(),intervals.end());
        st.push({intervals[0][0],intervals[0][1]});
            for(int i=1;i<intervals.size();i++){
                pair<int,int>t = st.top();
                if(t.second<intervals[i][0]){
                    st.push({intervals[i][0],intervals[i][1]});
                }
                else if(t.second<intervals[i][1]){
                    t.second=intervals[i][1];
                    st.pop();
                    st.push(t);
                }
            }
    
        while(!st.empty()){
            pair<int,int>tp=st.top();
            st.pop();
            res.push_back({tp.first,tp.second});
        }
        return res;
    }
};
