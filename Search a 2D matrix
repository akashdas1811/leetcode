Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false

Approach:
1)Check for null matriix: []  (if row ==0 return false, if col==0 return false)
2)search for target on the 1st row.
3)Search for 1st row if the last  element of 1st row is less than the target and the last element of 2nd row is greater than the target then the target is on the 2nd row.

Time Complexity:
O(row + col)

Code in C++:
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
           int row=matrix.size();
           
        if(row==0){
            return false;
        }
        int col=matrix[0].size();
        if(col==0){
            return false;
        }
        for(int i=0;i<row;i++){
            if(matrix[i][0]==target or matrix[i][col-1]==target){
                return true;
            }
        }
        for(int j=0;j<col;j++){
            if(matrix[0][j]==target){
                return true;
            }
        }
        int r_ind;
        for(int i=1;i<row;i++){
            if(matrix[i-1][col-1]<target and matrix[i][col-1]>target){
                r_ind=i;
            }
        }
        for(int i=0;i<col;i++){
            if(matrix[r_ind][i]==target){
                return true;
            }
        }
        return false;
    }
};
