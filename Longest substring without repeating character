Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             
Approach: using two pointers, sliding window and hashset.

code in c++:

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int start=0,end=0,m=0;
        unordered_set<char>st;
        while(end<s.length()){
            if(st.find(s[end])==st.end()){
                st.insert(s[end]);
                end++;
                m=max(m,(end-start));
            }
            else{
                st.erase(s[start]);
                start++;
            }
        }
        return m;
    }
};
