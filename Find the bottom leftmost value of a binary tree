Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
Input:

    2
   / \
  1   3

Output:
1
Example 2:
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7

Approach: 
By level order traversal first we push right value of the current node and then push left value ,,, the last node remains in the queue is bottom leftmost node and
traverse the current node value.

code in c++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        TreeNode* curr;
        while(!q.empty()){
           curr=q.front();
           q.pop();
           if(curr->right!=NULL){
               q.push(curr->right);
           }
           if(curr->left!=NULL){
               q.push(curr->left);
           }
        }
        return curr->val;
    }
};

