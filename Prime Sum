/*
Given an even number ( greater than 2 ), return two prime numbers whose sum will be equal to given number.

Input : 4
Output: 2 + 2 = 4

Input : 74
Output: 3 + 71 = 74

Input : 1024
Output: 3 + 1021 = 1024

If there are more than one solutions possible, return the lexicographically smaller solution.

If [a, b] is one solution with a <= b,
and [c,d] is another solution with c <= d, then

[a, b] < [c, d] 

If a < c OR a==c AND b < d. 

solution in c++: */

vector<int> Solution::primesum(int n) {
    vector<bool> prime(n+1); 
    //memset(prime, true, sizeof(prime)); 
    for(int i=0;i<=n;i++)
    {
        prime[i]=1;
    }
    prime[0]=0;
    prime[1]=0;
    for (int p=2; p*p<=n; p++) 
    { 
        // If prime[p] is not changed, then it is a prime 
        if (prime[p]) 
        { 
            // Update all multiples of p greater than or  
            // equal to the square of it 
            // numbers which are multiple of p and are 
            // less than p^2 are already been marked.  
            for (int i=p*p; i<=n; i += p) 
                prime[i] = 0; 
        } 
    } 
    vector<int>v(2);
    for(int i=2;i<=n/2;i++)
    {
        if(prime[i] and prime[n-i])
        {
            v[0]=i;
            v[1]=n-i;
            return v;
        }
    }
}

