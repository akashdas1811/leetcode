A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, 
and return a list of integers representing the size of these parts.

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
 

Note:

S will have length in range [1, 500].
S will consist of lowercase English letters ('a' to 'z') only.
 
Approach: for string "ababcbadefdefghijhg"   take the 1st and last index of every charcater and store the intervals. Then merge the ovarlapping intervals and take last 
index of the merging intervals and print the last indeices.
Here, for "a" -> [0,6]   "b"->[1,5].....so on.
here "a" and "b" are overlapped so merge the intervals [0,6]....so on.

Time Complexity: O(n)

Code in C++:

class Solution {
public:
    int LastIndex(string& str, char x) 
    { 
        int index = -1; 
        for (int i = 0; i < str.length(); i++) 
            if (str[i] == x) 
                index = i; 
        return index; 
    } 
    int firstindex(string& s,char x){
        int count=0;
        int pos1;
        for (int i = 0;i <= s.length();i++)
        {
            if (x == s[i])
            {
                count++;
                if (count  == 1)
                {
                    pos1 = i;
                    break;
                }
            }
        }
        return pos1;
    }
    
    vector<int> partitionLabels(string s) {
        map<char,int>m;
        for(int i=0;i<s.length();i++){
            m[s[i]]++;
        }
        vector<vector<int>>intervals;
        for(auto it:m){
            int pos1=firstindex(s,it.first);
            int pos2=LastIndex(s,it.first);
            intervals.push_back({pos1,pos2});
        }
        sort(intervals.begin(),intervals.end());
        // vector<int>ar;
        // for(int i=0;i<intervals.size();i++){
        //     ar.push_back(intervals[i][0]);
        // }
        // return ar;
        stack<pair<int,int>>st;
        vector<vector<int>>res;
        st.push({intervals[0][0],intervals[0][1]});
            for(int i=1;i<intervals.size();i++){
                pair<int,int>t = st.top();
                if(t.second<intervals[i][0]){
                    st.push({intervals[i][0],intervals[i][1]});
                }
                else if(t.second<intervals[i][1]){
                    t.second=intervals[i][1];
                    st.pop();
                    st.push(t);
                }
        }
        while(!st.empty()){
            pair<int,int>tp=st.top();
            st.pop();
            res.push_back({tp.first,tp.second});
        }
        vector<int>ar;
        for(int i=0;i<res.size();i++){
            ar.push_back(res[i][1]);
        }
        for(int i=0;i<ar.size()-1;i++){
            ar[i]=ar[i]-ar[i+1];
        }
        ar[ar.size()-1]=ar[ar.size()-1]+1;
        reverse(ar.begin(),ar.end());
        return ar;
    }
};
