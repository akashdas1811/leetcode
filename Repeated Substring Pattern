Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.

 

Example 1:

Input: "abab"
Output: True
Explanation: It's the substring "ab" twice.
Example 2:

Input: "aba"
Output: False
Example 3:

Input: "abcabcabcabc"
Output: True
Explanation: It's the substring "abc" four times. (And the substring "abcabc" twice.)

Approach:
abcabcabcabc -> here 4 same substring of 3 length "abc","abc","abc","abc"  or two same substring of 6 length "abcabc","abcabc" ,,so it returns true.

abcabcaba -> false.

So there will be always two same half of length substring.

so check every characters substring of left part of mid index is equal to the right half substring. If any character from left and right are not same then 
stop the loop and return false;

abcabcabcabc-> here mid index is h=> n/2 -> 12/2=6 ('a',0 indexbased)

left 1st character at index li=0 ('a')
right 1st character at index ri=li+h = 6 ('a')

left 2nd character at index li=1 ('b')
right 2nd character at index ri=li+h = 7 ('b')
............................................
.............................................
................................so on........

Code in c++:

class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        int n=s.length();
        for(int i=n/2;i>=1;i--){
            if(n%i==0){
                int j=0;
                while(j+i<n and s[j]==s[j+i]){
                    j++;
                }
                if(j+i==n){
                    return true;
                }
            }
        }
        return false;
    }
};









